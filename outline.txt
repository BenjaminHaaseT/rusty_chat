A simple chat room server, clients should be able to connect to the server and see a list
of available chat rooms to join. From there the client should be able to join a chat room, or create a new chatroom.
Once in a chatroom the client needs to be able to send and receive messages.

Server:
    High level design idea:
        -> Main Accept loop accepts client connections and sends to broker

        -> Broker Task: The main task that handles all incoming and outgoing requests/responses from the chatroom lobby.
                        Needs to be able to accept new client connections and events from connecting clients. Needs a
                        way to spawn/connect/manage state of chatroom broker tasks as well. Needs a way to manage the state of connected
                        and disconnecting clients. The broker task should listen for events triggered by connecting/already
                        connected clients, and
                        spawned chatroom sub-broker tasks. The main broker task should manage the state necessary
                        for these tasks and implement graceful shutdown.

                State:
                    Needs a map for peer ids to writing task channels, potentially more information should be mapped to
                    by clients id as well i.e. current chatroom if any etc...
                    Keep record of all recorded usernames
                    Need to manage the state of chatroom-sub-broker tasks, use id's to map from chatroom sub-broker id
                    to chatroom name, and subscription end of a channel, current capacity etc..
                    Keep hashset record of recorded chatroom names as well

                Functionality:
                    Takes a receiving end of a channel that listens for client generated events. Spawns a channel for harvesting
                    disconnected peers as well. Instantiate data structures needed for keeping track of state.
                    Loop selecting over possible input channels and perform necessary logic.
                    graceful shutdown.



           -> Handle Connection Task: Initializes a new client task and all sub-tasks needed to handle a new connecting client
                Functionality:
                    Accepts a new client Tcp Stream and sending end of a broker channel
                    needs to send a request to the broker for a new connecting client
                        request needs ~ the id of the client (generated in handle connection task),
                        shared reference to clients tcp stream (for writing task)
                        a sending end that will send  a new chatroom broker channel that also processes events

                    Task needs to listen to both the clients tcp stream as well as the receiving end of chatroom brokers
                    sender channel, to be able switch channels when client joins a new chatroom

           -> Client Write Task: Initially needs to start up a new task that will write responses from the broker(s) back
           to the clients socket.
                   State:
                        Needs a reference to the clients tcpstream
                        Needs a receiver from the main broker initially to receive responses from,
                        when the client is in the lobby
                        Needs an uninitialized `Stream` that can be set to receive responses from a new chatroom broker
                        task when the client enters a new chatroom, the new chatroom broker subscriber will be sent
                        by the main broker to the writer task when the client joins
                        Needs a receiving end of a channel from the clients reading task to enable graceful shutdown
                   Functionality:
                        Accepts a reference to the clients Tcpstream, a response receiver and a disconnection receiver from the broker
                        Initializes an empty 'Terminated' stream that will be set with the Response receiver from a chatroom broker task
                        loops collecting responses from the broker(s) and disconnection receiver.
                        Writes responses sent from broker(s) back to client
                        breaks when disconnection event is detected










        -> Chatroom Broker, gets spawned by main broker task. Accepts incoming messages, new clients, as well as
           client disconnection events. When receives an new client, new read/write tasks need to be initiated. When it receives a message
           the message will need to be broadcast to all subscribing clients. When it receives a disconnection event from a client,
           it needs to harvest the clients state i.e. connection and messages that are not completely written yet.
           Needs to have the state of the chatroom at all times. Needs to maintain
           some sort of broadcast channel so received messages can get broadcast to all writing tasks for the
           associated chatroom.
           State:
                Sending end of a broadcast channel to send received messages to all writing tasks a broadcast sender
                A receiving disconnection end of a channel to harvest disconnected peers
                A receiving end to receive messages from peers mpsc, where the chatroom broker has the single receiver
                A Collection of clients with Uuid's/screen names
                A sending of a disconnection channel for the chatroom itself when the room is empty

           Functionality:
                Join:
                    Whenever a request event is received the Chatroom broker needs to spawn new, read/write tasks
                    associated with the client. Also needs to store the new client in a collection of some kind.
                    Needs to spawn the read/write tasks with a sending end of a disconnection event, in the case when
                    a client disconnects. Also needs to have the clients write task receive from this brokers Broadcast
                    channel, so the write event can accept new messages from the chatroom.
                Message:
                    Needs to accept the message and broadcast it to all subscribing writer tasks
                Disconnect:
                    Needs to harvest the disconnected peer, remove it from its internal collection
                Empty:
                    Needs to initiate graceful shutdown, sending its own disconnect sender back to main broker
                    to signal to the broker that the chatroom is now empty and should be removed from the current state
                    of the main broker task



Client:
    An executable that takes command line arguments of sever_address and port to connect to. Should connect to
    the address via TCP, sending requests and responses. Whenever a request is sent, the client should listen for
    particular response(s). When a response is received the client interface must adjust its state i.e update it's UI
    according to the response received.

    Interface:
        Needs to accept a write half and read half of a tcp stream, and start the loop for listening for responses/parsing requests from the client.
        Should maintain a current UI page that is displayed, logic for interpreting user requests needs to be bound on
        the page being displayed, since it is dependent upon where the client is i.e. in the lobby, in the chatroom entering username etc...

        State:
            Page: A state machine that will take input from client and server streams execute appropriate logic and
            display output to the user. Needs to be able to parse input from the user (with checks) and return Frames
            representing the clients desired requests. Needs to be able to accept responses from the user and execute accordingly
            So the Page needs to be responsible for changing to the next state given the response received, as well
            as the logic for handling client input

            So at a high level a single page will have the following api
            Page.parse_request(input) -> Frame
            Page.parse_response(stream) -> Response
            Page.display()
            Page.change_state()

        Functionality:
            Main loop for interface:
                -Bind connection
                -Instantiate initial page

                Then Do
                    wait for response from server stream
                    update page.state_from_response(server) from response
                    - should also display ui page in here when appropriate as part of getting its state

                    parse frame from client input i.e
                    frame <- page.parse_request(input)
                    send request to server





